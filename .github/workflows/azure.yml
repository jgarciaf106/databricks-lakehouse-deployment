name: Workspace Management

on:
  schedule:
    - cron: '0 0 * * *'

env:
  BACKEND_RG_NAME: ${{ secrets.BACKEND_RG_NAME }}
  BACKEND_SA_NAME: ${{ secrets.BACKEND_SA_NAME }}
  BACKEND_CONTAINER_NAME: ${{ secrets.BACKEND_CONTAINER_NAME }}
  BACKEND_KEY: ${{ secrets.BACKEND_KEY }}

  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  
  DATABRICKS_ACCOUNT_ID: ${{ secrets.DATABRICKS_ACCOUNT_ID }}
  DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
  DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}

  DEPLOYMENT_CONFIG: ${{ secrets.DEPLOYMENT_CONFIG}}
  

jobs:
  check-date:
    name: Validate run date
    runs-on: ubuntu-latest
    outputs:
      deploy: ${{ steps.date-check.outputs.deploy }}
      destroy: ${{ steps.date-check.outputs.destroy }}
    steps:
      - name: Check Date for Custom Schedule
        id: date-check
        run: |
          #!/bin/bash

          # Detect OS type (GNU/Linux vs macOS)
          if date --version >/dev/null 2>&1; then
              OS="linux"  # GNU date (Linux/Ubuntu)
          else
              OS="macos"  # BSD date (macOS)
          fi

          # Get today's date
          TODAY=$(date +%Y-%m-%d)

          # Get the current year and month (or allow overrides)
          YEAR=${YEAR:-$(date +%Y)}
          MONTH=${MONTH:-$(date +%m)}

          # Find the first Sunday of the month
          if [[ "$OS" == "macos" ]]; then
              FIRST_DAY_OF_MONTH=$(date -j -v1d -v"${MONTH}m" -v"${YEAR}y" +%u)
              if [ "$FIRST_DAY_OF_MONTH" -eq 7 ]; then
                  FIRST_SUNDAY=$(date -j -v1d -v"${MONTH}m" -v"${YEAR}y" +%Y-%m-%d)
              else
                  FIRST_SUNDAY=$(date -j -v1d -v"${MONTH}m" -v"${YEAR}y" -v+"$((7 - FIRST_DAY_OF_MONTH))"d +%Y-%m-%d)
              fi
          else
              FIRST_DAY_OF_MONTH=$(date -d "$YEAR-$MONTH-01" +%u)
              if [ "$FIRST_DAY_OF_MONTH" -eq 7 ]; then
                  FIRST_SUNDAY=$(date -d "$YEAR-$MONTH-01" +%Y-%m-%d)
              else
                  FIRST_SUNDAY=$(date -d "$YEAR-$MONTH-01 +$((7 - FIRST_DAY_OF_MONTH)) days" +%Y-%m-%d)
              fi
          fi

          # Find the third Sunday (14 days after first Sunday)
          if [[ "$OS" == "macos" ]]; then
              THIRD_SUNDAY=$(date -j -v+14d -f "%Y-%m-%d" "$FIRST_SUNDAY" +%Y-%m-%d)
          else
              THIRD_SUNDAY=$(date -d "$FIRST_SUNDAY +14 days" +%Y-%m-%d)
          fi

          # Find the Saturday before each Sunday (-1 day)
          if [[ "$OS" == "macos" ]]; then
              SATURDAY_BEFORE_FIRST_SUNDAY=$(date -j -v-1d -f "%Y-%m-%d" "$FIRST_SUNDAY" +%Y-%m-%d)
              SATURDAY_BEFORE_THIRD_SUNDAY=$(date -j -v-1d -f "%Y-%m-%d" "$THIRD_SUNDAY" +%Y-%m-%d)
          else
              SATURDAY_BEFORE_FIRST_SUNDAY=$(date -d "$FIRST_SUNDAY -1 day" +%Y-%m-%d)
              SATURDAY_BEFORE_THIRD_SUNDAY=$(date -d "$THIRD_SUNDAY -1 day" +%Y-%m-%d)
          fi

          # Find the Monday after each Sunday (+1 day)
          if [[ "$OS" == "macos" ]]; then
              MONDAY_AFTER_FIRST_SUNDAY=$(date -j -v+1d -f "%Y-%m-%d" "$FIRST_SUNDAY" +%Y-%m-%d)
              MONDAY_AFTER_THIRD_SUNDAY=$(date -j -v+1d -f "%Y-%m-%d" "$THIRD_SUNDAY" +%Y-%m-%d)
          else
              MONDAY_AFTER_FIRST_SUNDAY=$(date -d "$FIRST_SUNDAY +1 day" +%Y-%m-%d)
              MONDAY_AFTER_THIRD_SUNDAY=$(date -d "$THIRD_SUNDAY +1 day" +%Y-%m-%d)
          fi

          # Check if today is a Monday after the first or third Sunday
          if [[ "$TODAY" == "$MONDAY_AFTER_FIRST_SUNDAY" || "$TODAY" == "$MONDAY_AFTER_THIRD_SUNDAY" ]]; then
              echo "Monday schedule matched: $TODAY"
              echo "deploy=true" >> $GITHUB_ENV
              echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "$TODAY" == "$SATURDAY_BEFORE_FIRST_SUNDAY" || "$TODAY" == "$SATURDAY_BEFORE_THIRD_SUNDAY" ]]; then
              echo "Saturday schedule matched: $TODAY"
              echo "destroy=true" >> $GITHUB_ENV
              echo "destroy=true" >> $GITHUB_OUTPUT
          else
              echo "No match: $TODAY"
              echo "destroy=false" >> $GITHUB_ENV
              echo "destroy=false" >> $GITHUB_OUTPUT
              echo "deploy=false" >> $GITHUB_ENV
              echo "deploy=false" >> $GITHUB_OUTPUT
          fi

  create-workspace:
    name: Create Azure Workspace
    environment: azure
    needs: check-date
    if: needs.check-date.outputs.deploy == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: adb-lakehouse
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Set execute permissions
        run: chmod +x actions.sh

      - name: Terraform Init
        id: init
        run: ./actions.sh init

      - name: Terraform Validate
        id: validate
        run: ./actions.sh validate

      - name: Terraform Plan
        id: plan
        run: ./actions.sh plan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        run: ./actions.sh apply
        continue-on-error: true

      - name: Terraform Apply Status
        if: steps.apply.outcome == 'failure'
        run: exit 1

      - name: Success
        if: steps.apply.outcome == 'success'
        run: echo "Workspace Deployment Successful"

  destroy-workspace:
    name: Destoy Azure Workspace
    environment: azure
    needs: check-date
    if: needs.check-date.outputs.destroy == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: adb-lakehouse
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Set execute permissions
        run: chmod +x actions.sh

      - name: Terraform Destroy
        id: destroy
        run: ./actions.sh destroy
        continue-on-error: true

      - name: Terraform destroy Status
        if: steps.destroy.outcome == 'failure'
        run: exit 1

      - name: Success
        if: steps.destroy.outcome == 'success'
        run: echo "Workspace Destroy Successful"

